name: Build tihc (macOS, Windows & Linux)

on:
  workflow_dispatch:

jobs:
  # build-linux-musl:
  #   runs-on: ubuntu-latest
  #   container:
  #     image: alpine:latest
  #   env:
  #     PATH: $HOME/.cargo/bin:/usr/local/go/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Install system build tools
  #       run: |
  #         apk update
  #         apk add --no-cache build-base musl-dev clang llvm lld libc-dev wget tar curl bash xz openssl openssl-dev pkgconf perl
  #         # 查找 musl-gcc 或 fallback 到 clang
  #         echo '--- find / -name musl-gcc ---'
  #         find / -name musl-gcc
  #         MUSL_GCC_PATH=$(find / -name musl-gcc 2>/dev/null | head -n1)
  #         if [ -n "$MUSL_GCC_PATH" ]; then
  #           ln -sf "$MUSL_GCC_PATH" /usr/local/bin/musl-gcc
  #           export CC=musl-gcc
  #         else
  #           export CC=clang
  #           echo 'musl-gcc not found, fallback to clang.'
  #         fi
  #         export PATH="/usr/local/bin:/usr/bin:$PATH"
  #         which $CC || (echo "$CC not found!" && exit 1)
   #    - name: Install Go 1.23.10
   #      run: |
   #        wget https://go.dev/dl/go1.23.10.linux-amd64.tar.gz
   #        tar -C /usr/local -xzf go1.23.10.linux-amd64.tar.gz
   #        export PATH="/usr/local/go/bin:$PATH"
   #        go version

   #    - name: Install Rust 1.83.0 (musl, manual)
   #      run: |
   #        wget https://static.rust-lang.org/dist/rust-1.83.0-x86_64-unknown-linux-musl.tar.gz
   #        tar -xzf rust-1.83.0-x86_64-unknown-linux-musl.tar.gz
   #        ./rust-1.83.0-x86_64-unknown-linux-musl/install.sh --prefix=/usr/local
   #        echo 'export PATH="/usr/local/bin:$PATH"' >> /etc/profile
   #        export PATH="/usr/local/bin:$PATH"
   #        rustc --version
   #        cargo --version
   #        # 安装 rustup
   #        curl https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path
   #        echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> /etc/profile
   #        export PATH="$HOME/.cargo/bin:/usr/local/bin:$PATH"
   #        ln -sf $HOME/.cargo/bin/rustup /usr/local/bin/rustup
   #        rustup --version

   #    - name: Install Node.js & npm (alpine musl)
   #      run: |
   #        apk add --no-cache nodejs npm
   #        node -v
   #        npm -v

   #    - name: Install Yarn (manual)
   #      run: |
   #        npm install -g yarn
   #        yarn -v
   #    - name: Install Rust musl target
   #      run: rustup target add x86_64-unknown-linux-musl
   #    - name: Get tihc version
   #      id: get_version
   #      shell: bash
   #      run: |
   #        cat cli/Cargo.toml | grep version
   #        ver=$(grep -E '^version\s*=\s*"' cli/Cargo.toml | head -n1 | sed -E 's/.*"([^"]+)".*/\1/')
   #        echo "[debug] extracted version: $ver"
   #        echo "version=$ver" >> $GITHUB_OUTPUT
   #    - name: Build plugin_lossy_ddl go c-archive (linux)
   #      run: |
   #        cd plugins/plugin_lossy_ddl/go
   #        go clean -cache -modcache -work -x
   #        CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -buildmode=c-archive -trimpath -o libschematracker.a .
   #        ls -lh libschematracker.a libschematracker.h || true
   #    - name: Build frontend (dashboard)
   #      run: |
   #        rm -rf frontend/dist
   #        cd frontend
   #        yarn install
   #        yarn build
   #    - name: Build tihc (Linux musl static)
   #      run: |
   #        cargo build --release --target x86_64-unknown-linux-musl
   #        mkdir -p bin-musl
   #        cp target/x86_64-unknown-linux-musl/release/tihc bin-musl/tihc-linux-musl

   #    - name: Check binary is statically linked
   #      run: |
   #        file bin-musl/tihc-linux-musl
   #        file bin-musl/tihc-linux-musl | grep -E 'statically linked|static-pie linked' || (echo 'ERROR: tihc-linux-musl is not statically linked!' && exit 1)
   #    - name: Upload musl static binary artifacts (Linux)
   #      uses: actions/upload-artifact@v4
   #      with:
   #        name: tihc-linux-bin-v${{ steps.get_version.outputs.version }}
   #        path: bin-musl
   #    - name: Package binaries (Linux)
   #      run: |
   #        tar -czvf tihc-v${{ steps.get_version.outputs.version }}-linux.tar.gz -C bin-musl .
   #    - name: Generate sha256 checksum (Linux)
   #      run: |
   #        sha256sum tihc-v${{ steps.get_version.outputs.version }}-linux.tar.gz > tihc-v${{ steps.get_version.outputs.version }}-linux.tar.gz.sha256
   #    - name: Upload packaged artifact (Linux)
   #      uses: actions/upload-artifact@v4
   #      with:
   #        name: tihc-v${{ steps.get_version.outputs.version }}-linux.tar.gz
   #        path: tihc-v${{ steps.get_version.outputs.version }}-linux.tar.gz
   #    - name: Upload sha256 checksum (Linux)
   #      uses: actions/upload-artifact@v4
   #      with:
   #        name: tihc-v${{ steps.get_version.outputs.version }}-linux.sha256
   #        path: tihc-v${{ steps.get_version.outputs.version }}-linux.tar.gz.sha256
  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get tihc version
        id: get_version
        run: |
          cat cli/Cargo.toml | grep version
          ver=$(grep -E '^version\s*=\s*"' cli/Cargo.toml | head -n1 | sed -E 's/.*"([^"]+)".*/\1/')
          echo "[debug] extracted version: $ver"
          echo "version=$ver" >> $GITHUB_OUTPUT
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
      - name: Install yarn
        run: npm install -g yarn
      - name: Set yarn registry to taobao
        run: yarn config set registry https://registry.npmmirror.com
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - name: Install Rust targets (if needed)
        run: rustup target add aarch64-apple-darwin x86_64-apple-darwin
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: plugins/plugin_lossy_ddl/go/go.mod
      - name: Download Go modules
        run: cd plugins/plugin_lossy_ddl/go && go mod download
      - name: Build all (macOS)
        run: make all
      - name: Upload binary artifacts (macOS)
        uses: actions/upload-artifact@v4
        with:
          name: tihc-macos-bin-v${{ steps.get_version.outputs.version }}
          path: bin/*
      - name: Package binaries (macOS)
        run: |
          tar -czvf tihc-v${{ steps.get_version.outputs.version }}-macos.tar.gz -C bin .
      - name: Generate sha256 checksum (macOS)
        run: |
          shasum -a 256 tihc-v${{ steps.get_version.outputs.version }}-macos.tar.gz > tihc-v${{ steps.get_version.outputs.version }}-macos.tar.gz.sha256
      - name: Upload packaged artifact (macOS)
        uses: actions/upload-artifact@v4
        with:
          name: tihc-v${{ steps.get_version.outputs.version }}-macos.tar.gz
          path: tihc-v${{ steps.get_version.outputs.version }}-macos.tar.gz
      - name: Upload sha256 checksum (macOS)
        uses: actions/upload-artifact@v4
        with:
          name: tihc-v${{ steps.get_version.outputs.version }}-macos.sha256
          path: tihc-v${{ steps.get_version.outputs.version }}-macos.tar.gz.sha256

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get tihc version
        id: get_version
        shell: bash
        run: |
          cat cli/Cargo.toml | grep version
          ver=$(grep -E '^version\s*=\s*"' cli/Cargo.toml | head -n1 | sed -E 's/.*"([^"]+)".*/\1/')
          echo "[debug] extracted version: $ver"
          echo "version=$ver" >> $GITHUB_OUTPUT
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
      - name: Install yarn
        run: npm install -g yarn
      - name: Set yarn registry to taobao
        run: yarn config set registry https://registry.npmmirror.com
      - name: Set up Rust (GNU)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable-x86_64-pc-windows-gnu
          profile: minimal
          override: true
      - name: Install Rust targets (if needed)
        run: rustup target add x86_64-pc-windows-gnu
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: plugins/plugin_lossy_ddl/go/go.mod
      - name: Download Go modules
        run: cd plugins/plugin_lossy_ddl/go && go mod download
      - name: Build all (Windows)
        run: make all
      - name: Upload binary artifacts (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: tihc-windows-bin-v${{ steps.get_version.outputs.version }}
          path: bin/*
      - name: Package binaries (Windows)
        run: |
          powershell Compress-Archive -Path bin\* -DestinationPath tihc-v${{ steps.get_version.outputs.version }}-windows.zip
      - name: Generate sha256 checksum (Windows)
        run: |
          certutil -hashfile tihc-v${{ steps.get_version.outputs.version }}-windows.zip SHA256 > tihc-v${{ steps.get_version.outputs.version }}-windows.zip.sha256
      - name: Upload packaged artifact (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: tihc-v${{ steps.get_version.outputs.version }}-windows.zip
          path: tihc-v${{ steps.get_version.outputs.version }}-windows.zip
      - name: Upload sha256 checksum (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: tihc-v${{ steps.get_version.outputs.version }}-windows.sha256
          path: tihc-v${{ steps.get_version.outputs.version }}-windows.zip.sha256

  build-linux-glibc-centos8:
    # Build on Rocky Linux 8 to ensure glibc compatibility (GLIBC_2.28+)
    runs-on: ubuntu-latest
    container:
      image: rockylinux:8
    steps:
      - uses: actions/checkout@v4
      - name: Install system build tools (CentOS 8)
        run: |
          dnf install -y gcc gcc-c++ make openssl-devel perl wget tar curl xz
      - name: Install Go 1.23.10
        run: |
          wget https://go.dev/dl/go1.23.10.linux-amd64.tar.gz
          tar -C /usr/local -xzf go1.23.10.linux-amd64.tar.gz
          echo "/usr/local/go/bin" >> $GITHUB_PATH
          export PATH="/usr/local/go/bin:$PATH"
          go version
      - name: Install Rust 1.83.0 (manual)
        run: |
          wget https://static.rust-lang.org/dist/rust-1.83.0-x86_64-unknown-linux-gnu.tar.gz
          tar -xzf rust-1.83.0-x86_64-unknown-linux-gnu.tar.gz
          ./rust-1.83.0-x86_64-unknown-linux-gnu/install.sh --prefix=/usr/local
          export PATH="/usr/local/bin:$PATH"
          rustc --version
          cargo --version
          curl https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path
          export PATH="$HOME/.cargo/bin:/usr/local/bin:$PATH"
          ln -sf $HOME/.cargo/bin/rustup /usr/local/bin/rustup
          rustup --version
      - name: Install Node.js & npm (Rocky 8,  Node 20)
        run: |
          curl -fsSL https://rpm.nodesource.com/setup_20.x | bash -
          dnf install -y nodejs
          node -v
          npm -v
      - name: Install Yarn (manual)
        run: |
          npm install -g yarn
          yarn -v
      - name: Install Rust glibc target
        run: rustup target add x86_64-unknown-linux-gnu
      - name: Get tihc version
        id: get_version_centos8
        shell: bash
        run: |
          cat cli/Cargo.toml | grep version
          ver=$(grep -E '^version\s*=\s*"' cli/Cargo.toml | head -n1 | sed -E 's/.*"([^"]+)".*/\1/')
          echo "[debug] extracted version: $ver"
          echo "version=$ver" >> $GITHUB_OUTPUT
      - name: Build plugin_lossy_ddl go c-archive (linux)
        run: |
          cd plugins/plugin_lossy_ddl/go
          go clean -cache -modcache -work -x
          CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -buildmode=c-archive -trimpath -o libschematracker.a .
          ls -lh libschematracker.a libschematracker.h || true
      - name: Build frontend (dashboard)
        run: |
          rm -rf frontend/dist
          cd frontend
          yarn install
          yarn build
      - name: Build tihc (Linux glibc static, CentOS 8)
        run: |
          cargo build --release --target x86_64-unknown-linux-gnu
          mkdir -p bin-glibc-centos8
          cp target/x86_64-unknown-linux-gnu/release/tihc bin-glibc-centos8/tihc
      - name: Show binary link info (glibc, CentOS 8)
        run: |
          file bin-glibc-centos8/tihc
          ldd bin-glibc-centos8/tihc || true
          echo "Note: Built on CentOS 8 for glibc 2.28+ compatibility."
      - name: Upload glibc static binary artifacts (CentOS 8)
        uses: actions/upload-artifact@v4
        with:
          name: tihc-linux-glibc-centos8-bin-v${{ steps.get_version_centos8.outputs.version }}
          path: bin-glibc-centos8
      - name: Package binaries (Linux glibc, CentOS 8)
        run: |
          tar -czvf tihc-v${{ steps.get_version_centos8.outputs.version }}-linux-glibc-centos8.tar.gz -C bin-glibc-centos8 .
      - name: Generate sha256 checksum (Linux glibc, CentOS 8)
        run: |
          sha256sum tihc-v${{ steps.get_version_centos8.outputs.version }}-linux-glibc-centos8.tar.gz > tihc-v${{ steps.get_version_centos8.outputs.version }}-linux-glibc-centos8.tar.gz.sha256
      - name: Upload packaged artifact (Linux glibc, CentOS 8)
        uses: actions/upload-artifact@v4
        with:
          name: tihc-v${{ steps.get_version_centos8.outputs.version }}-linux-glibc-centos8.tar.gz
          path: tihc-v${{ steps.get_version_centos8.outputs.version }}-linux-glibc-centos8.tar.gz
      - name: Upload sha256 checksum (Linux glibc, CentOS 8)
        uses: actions/upload-artifact@v4
        with:
          name: tihc-v${{ steps.get_version_centos8.outputs.version }}-linux-glibc-centos8.sha256
          path: tihc-v${{ steps.get_version_centos8.outputs.version }}-linux-glibc-centos8.tar.gz.sha256