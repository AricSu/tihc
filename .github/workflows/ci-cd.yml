name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a new release'
        required: true
        default: false
        type: boolean

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev make

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Run tests
        run: cargo test --workspace

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  build:
    name: Build for ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux-x86_64
            target: x86_64-unknown-linux-gnu
            use_makefile: true
          # Temporarily disable ARM64 until we solve the OpenSSL cross-compilation issue
          # - os: ubuntu-latest
          #   platform: linux-arm64
          #   target: aarch64-unknown-linux-gnu
          #   use_makefile: false
          - os: macos-latest
            platform: macos-x86_64
            target: x86_64-apple-darwin
            use_makefile: true
          - os: macos-latest
            platform: macos-arm64
            target: aarch64-apple-darwin
            use_makefile: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev make

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # macOS already has make, just ensure we have the target
          rustup target add ${{ matrix.target }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.platform }}

      - name: Debug build environment
        run: |
          echo "=== Build Environment Debug ==="
          echo "OS: ${{ matrix.os }}"
          echo "Platform: ${{ matrix.platform }}"
          echo "Target: ${{ matrix.target }}"
          echo "Use Makefile: ${{ matrix.use_makefile }}"
          echo "Current directory: $(pwd)"
          echo "Rust version: $(rustc --version)"
          echo "Available targets: $(rustup target list --installed)"
          echo "==============================="

      - name: Build with Makefile (native targets)
        if: matrix.use_makefile == true
        run: make server

      - name: Strip binary
        run: |
          if [ -f "bin/tihc" ]; then
            strip bin/tihc
          fi

      - name: Test CLI binary
        run: |
          if [ -f "bin/tihc" ]; then
            echo "Testing tihc binary..."
            ./bin/tihc --version
            ./bin/tihc --help
          else
            echo "Error: tihc binary not found at bin/tihc"
            echo "Checking target directory..."
            ls -la target/release/ || echo "No target/release directory"
            exit 1
          fi

      # Only package for releases
      - name: Package binary
        if: startsWith(github.ref, 'refs/tags/') || github.event.inputs.create_release == 'true'
        run: |
          # Extract version from tag if available
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="dev-$(date +%Y%m%d-%H%M%S)"
          fi
          
          echo "Packaging version: ${VERSION}"
          echo "Platform: ${{ matrix.platform }}"
          
          # Ensure binary exists
          if [ ! -f "bin/tihc" ]; then
            echo "Error: Binary not found at bin/tihc"
            exit 1
          fi
          
          # Create package
          cd bin
          tar czf ../tihc-${{ matrix.platform }}-${VERSION}.tar.gz tihc
          cd ..
          
          # Verify package
          echo "Created package:"
          ls -la tihc-${{ matrix.platform }}-${VERSION}.tar.gz
          
          # Test package contents
          echo "Package contents:"
          tar -tzf tihc-${{ matrix.platform }}-${VERSION}.tar.gz

      - name: Upload artifact
        if: startsWith(github.ref, 'refs/tags/') || github.event.inputs.create_release == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: tihc-${{ matrix.platform }}
          path: tihc-${{ matrix.platform }}-*.tar.gz

  release:
    name: Create GitHub Release
    if: startsWith(github.ref, 'refs/tags/') || github.event.inputs.create_release == 'true'
    needs: [test, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List artifacts (debug)
        run: |
          echo "=== Artifacts Debug ==="
          find artifacts -type f -name "*" | head -20
          echo "=== Directory structure ==="
          ls -la artifacts/ || echo "No artifacts directory"
          for dir in artifacts/*/; do
            if [ -d "$dir" ]; then
              echo "Directory: $dir"
              ls -la "$dir"
            fi
          done
          echo "======================="

      - name: Extract version from tag
        id: get_version
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
            echo "Found tag version: ${VERSION}"
          else
            VERSION="manual-release-$(date +%Y%m%d-%H%M%S)"
            echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
            echo "Using manual version: ${VERSION}"
          fi

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
          files: artifacts/**/*.tar.gz
          body: |
            ## TiHC Release ${{ steps.get_version.outputs.VERSION }}
            
            ### Installation
            
            **Universal Installation (Recommended):**
            ```bash
            curl -fsSL https://raw.githubusercontent.com/AricSu/tihc/main/scripts/universal-install.sh | bash
            ```
            
            **Manual Download:**
            Download the appropriate binary for your platform below.
            
            ### Supported Platforms
            - Linux x86_64
            - macOS x86_64 (Intel)
            - macOS ARM64 (Apple Silicon)
            
            ### Changes
            See the commit history for detailed changes in this release.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
